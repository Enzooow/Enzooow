{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "APS.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Enzooow/Enzooow/blob/main/APS\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eNiphMlcGue4"
      },
      "source": [
        "from random import seed\n",
        "from random import randint\n",
        "import time\n",
        "import sys\n",
        "import numpy as np\n",
        "\n",
        "sys.setrecursionlimit(10 ** 9)"
      ],
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IWQJGVEwG_5_"
      },
      "source": [
        "def partition(colecao, l, h):\n",
        "    i = ( l - 1 )\n",
        "    x = colecao[h]\n",
        " \n",
        "    for j in range(l, h):\n",
        "        if   colecao[j] <= x:\n",
        "\n",
        "            i = i + 1\n",
        "            colecao[i], colecao[j] = colecao[j], colecao[i]\n",
        " \n",
        "    colecao[i + 1], colecao[h] = colecao[h], colecao[i + 1]\n",
        "    return (i + 1)\n",
        " \n",
        "def quickSortIterative(colecao, l, h):\n",
        " \n",
        "    size = h - l + 1\n",
        "    stack = [0] * (size)\n",
        " \n",
        "    top = -1\n",
        " \n",
        "    top = top + 1\n",
        "    stack[top] = l\n",
        "    top = top + 1\n",
        "    stack[top] = h\n",
        " \n",
        "    while top >= 0:\n",
        " \n",
        "        h = stack[top]\n",
        "        top = top - 1\n",
        "        l = stack[top]\n",
        "        top = top - 1\n",
        " \n",
        "        p = partition( colecao, l, h )\n",
        " \n",
        "        if p-1 > l:\n",
        "            top = top + 1\n",
        "            stack[top] = l\n",
        "            top = top + 1\n",
        "            stack[top] = p - 1\n",
        " \n",
        "        if p + 1 < h:\n",
        "            top = top + 1\n",
        "            stack[top] = p + 1\n",
        "            top = top + 1\n",
        "            stack[top] = h"
      ],
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZFbe2UHKGzmD"
      },
      "source": [
        "def partition(colecao, low, high):\n",
        "    i = (low - 1)        \n",
        "    pivot = colecao[high]    \n",
        " \n",
        "    for j in range(low, high):\n",
        "        if colecao[j] <= pivot:\n",
        "            i += 1\n",
        "            colecao[i], colecao[j] = colecao[j], colecao[i]\n",
        " \n",
        "    colecao[i + 1], colecao[high] = colecao[high], colecao[i + 1]\n",
        "    return (i + 1)\n",
        " \n",
        "def quickSortRecursive(colecao, low, high):\n",
        "    if low < high:\n",
        " \n",
        "        pi = partition(colecao, low, high)\n",
        " \n",
        "        quickSortRecursive(colecao, low, pi-1)\n",
        "        quickSortRecursive(colecao, pi + 1, high)\n",
        "\n",
        "## Fim Solução Recursiva\n",
        "\n",
        "\n"
      ],
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9FGT6W8XG136"
      },
      "source": [
        "def criarColecao(colecao, tamanho):\n",
        "     for indice in range(0, tamanho):\n",
        "        valor = np.int64(randint(0, 51))\n",
        "        colecao.append(valor)"
      ],
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YO2dO1fsG6UG"
      },
      "source": [
        "def main():\n",
        "  TAMANHO = 20000\n",
        "  colecao = []\n",
        "\n",
        "  criarColecao(colecao,  TAMANHO)\n",
        "  \n",
        "  colecaoRecursiva = colecao.copy()\n",
        "  colecaoIterativa = colecao.copy()\n",
        "\n",
        "  tempoInicial = time.time() \n",
        "  quickSortRecursive(colecaoRecursiva, 0, TAMANHO - 1)\n",
        "  tempoFinal = time.time()\n",
        "\n",
        "  print(\"Tempo Solução Recursiva: {} s\".format(tempoFinal - tempoInicial))\n",
        "\n",
        "  tempoInicial = time.time() \n",
        "  quickSortIterative(colecaoIterativa, 0, TAMANHO - 1) \n",
        "  tempoFinal = time.time()\n",
        "  print(\"Tempo Solução Iterativa: {} s\".format(tempoFinal - tempoInicial))"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fu0u6xfMG3jn",
        "outputId": "94a05316-7f8f-4ba1-a840-b3ec82037905"
      },
      "source": [
        "if __name__ == '__main__':\n",
        "  main()"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Tempo Solução Recursiva: 1.0576798915863037 s\n",
            "Tempo Solução Iterativa: 1.048332691192627 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4k88kSWUJCP1",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        },
        "outputId": "d7345b28-78b5-4271-f3ed-ad68f70a0230"
      },
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "listaVarTAMANHOutilizados = [50, 100, 500, 1000, 5000, 10000, 20000]\n",
        "listaTempoIterativo = [0.00013804, 0.00171828, 0.00032210, 0.00631666, 0.06573724, 0.24343347, 1.04833269]\n",
        "listaTempoRecursivo = [0.00015616, 0.00269365, 0.00027012, 0.00562953, 0.06932091, 0.24577808, 1.05767989]\n",
        "\n",
        "dicionario = {\"Variáveis TAMANHO utilizados\":listaVarTAMANHOutilizados, \"Tempo Iterativo\":listaTempoIterativo, \"Tempo Recursivo\":listaTempoRecursivo}\n",
        "\n",
        "planilhaxlsx = pd.DataFrame.from_dict(dicionario)\n",
        "planilhaxlsx.to_excel(\"Estatísticas.xlsx\")\n",
        "\n",
        "plt.plot(planilhaxlsx[\"Variáveis TAMANHO utilizados\"], planilhaxlsx[\"Tempo Iterativo\"], color = \"red\")\n",
        "plt.plot(planilhaxlsx[\"Variáveis TAMANHO utilizados\"], planilhaxlsx[\"Tempo Recursivo\"], color = \"green\")\n",
        "\n",
        "plt.title(\"Tempo de Soluções | Iterativa e Recursiva\")\n",
        "plt.xlabel(\"Variáveis TAMANHO utilizados\")\n",
        "plt.ylabel(\"Tempo de Execução (em segundos)\")\n",
        "\n",
        "plt.savefig(\"Gráfico.png\")\n",
        "plt.show()"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FawRIoIQ3G-O"
      },
      "source": [
        "# CONCLUSÃO\n",
        "Ao executar os códigos e analisar os gráficos, é possível concluir que, por mais que pequenas as diferenças, a solução iterativa é executada em um tempo suavemente menor do que a recursiva a partir do valor 100 da variável \"TAMANHO\". É possível notar uma diferença minimamente maior entre 2750 e 5500 e a partir de 15000. "
      ]
    }
  ]
}